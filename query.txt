// Role Table

//User Table
CREATE TABLE `online_movie_ticket_booking_system`.`user` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `user_name` NVARCHAR(50) NOT NULL,
  `user_role_id` INT NOT NULL,
  `user_phone_number` VARCHAR(12) NOT NULL,
  `user_email` VARCHAR(45) NOT NULL,
  `user_password` CHAR(60) NOT NULL,
  PRIMARY KEY (`id`),
  INDEX `user_role_id_idx` (`user_role_id` ASC) VISIBLE,
  CONSTRAINT `user_role_id`
    FOREIGN KEY (`user_role_id`)
    REFERENCES `online_movie_ticket_booking_system`.`role` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION);

//screen table
CREATE TABLE `online_movie_ticket_booking_system`.`screen` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `screen_movie_id` INT NOT NULL,
  `screen_movie_time` VARCHAR(45) NOT NULL,
  `private_screen_booking` TINYINT NOT NULL,
  PRIMARY KEY (`id`),
  INDEX (`screen_movie_id` ASC) VISIBLE,
  CONSTRAINT `screen_movie_id_fk`
    FOREIGN KEY (`screen_movie_id`)
    REFERENCES `online_movie_ticket_booking_system`.`movie` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION);

//seat
CREATE TABLE `online_movie_ticket_booking_system`.`seat` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `seat_price` DOUBLE NOT NULL,
  `seat_screen_id` INT NOT NULL,
  `seat_type` VARCHAR(45) NOT NULL,
  `seat_status` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`id`),
  INDEX `seat_screen_id_idx` (`seat_screen_id` ASC) VISIBLE,
  CONSTRAINT `seat_screen_id`
    FOREIGN KEY (`seat_screen_id`)
    REFERENCES `online_movie_ticket_booking_system`.`screen` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION);

//collection
CREATE TABLE `online_movie_ticket_booking_system`.`collection` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `collection_movie_id` INT NOT NULL,
  `collection_total_amount` DOUBLE NOT NULL,
  `morning_collection_amount` DOUBLE NOT NULL,
  `evening_collection_amount` DOUBLE NOT NULL,
  `night_collection_amount` DOUBLE NOT NULL,
  PRIMARY KEY (`id`),
  INDEX `collection_movie_id_idx` (`collection_movie_id` ASC) VISIBLE,
  CONSTRAINT `collection_movie_id`
    FOREIGN KEY (`collection_movie_id`)
    REFERENCES `online_movie_ticket_booking_system`.`movie` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE);

//private_screen
CREATE TABLE `online_movie_ticket_booking_system`.`private_screen` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `p_screen_id` INT NOT NULL,
  `p_movie_id` INT NOT NULL,
  `p_user_id` INT NOT NULL,
  `p_time` DATE NOT NULL,
  PRIMARY KEY (`id`),
  INDEX `p_screen_id_idx` (`p_screen_id` ASC) VISIBLE,
  INDEX `p_movie_id_idx` (`p_movie_id` ASC) VISIBLE,
  INDEX `p_user_id_idx` (`p_user_id` ASC) VISIBLE,
  CONSTRAINT `p_screen_id`
    FOREIGN KEY (`p_screen_id`)
    REFERENCES `online_movie_ticket_booking_system`.`screen` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `p_movie_id`
    FOREIGN KEY (`p_movie_id`)
    REFERENCES `online_movie_ticket_booking_system`.`movie` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `p_user_id`
    FOREIGN KEY (`p_user_id`)
    REFERENCES `online_movie_ticket_booking_system`.`user` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE);

//snack
CREATE TABLE `online_movie_ticket_booking_system`.`snack` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `snack_amount` DOUBLE NOT NULL,
  `snack_type` VARCHAR(45) NOT NULL,
  `snack_description` TEXT(200) NOT NULL,
  `snack_offer` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`id`));

//e-gift
CREATE TABLE `online_movie_ticket_booking_system`.`e_gift` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `voucher_user_id` INT NOT NULL,
  `voucher_code` VARCHAR(45) NOT NULL,
  `voucher_amount` DOUBLE NOT NULL,
  PRIMARY KEY (`id`),
  INDEX `voucher_user_id_idx` (`voucher_user_id` ASC) VISIBLE,
  CONSTRAINT `voucher_user_id`
    FOREIGN KEY (`voucher_user_id`)
    REFERENCES `online_movie_ticket_booking_system`.`user` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE);

//booking
CREATE TABLE `online_movie_ticket_booking_system`.`booking` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `booking_movie_id` INT NULL,
  `booking_screen_id` INT NULL,
  `booking_user_id` INT NULL,
  `booking_seat_id` INT NULL,
  `booking_date` DATE NOT NULL,
  `booking_snack_id` INT NULL,
  `booking_price` DOUBLE NOT NULL,
  `booking_payment_status` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `booking_movie_id_UNIQUE` (`booking_movie_id` ASC) VISIBLE,
  INDEX `booking_screen_id_idx` (`booking_screen_id` ASC) VISIBLE,
  INDEX `booking_user_id_idx` (`booking_user_id` ASC) VISIBLE,
  INDEX `booking_seat_id_idx` (`booking_seat_id` ASC) VISIBLE,
  INDEX `booking_snack_id_idx` (`booking_snack_id` ASC) VISIBLE,
  CONSTRAINT `booking_movie_id`
    FOREIGN KEY (`booking_movie_id`)
    REFERENCES `online_movie_ticket_booking_system`.`movie` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `booking_screen_id`
    FOREIGN KEY (`booking_screen_id`)
    REFERENCES `online_movie_ticket_booking_system`.`screen` (`id`)
    ON DELETE SET NULL
    ON UPDATE SET NULL,
  CONSTRAINT `booking_user_id`
    FOREIGN KEY (`booking_user_id`)
    REFERENCES `online_movie_ticket_booking_system`.`user` (`id`)
    ON DELETE SET NULL
    ON UPDATE SET NULL,
  CONSTRAINT `booking_seat_id`
    FOREIGN KEY (`booking_seat_id`)
    REFERENCES `online_movie_ticket_booking_system`.`seat` (`id`)
    ON DELETE SET NULL
    ON UPDATE SET NULL,
  CONSTRAINT `booking_snack_id`
    FOREIGN KEY (`booking_snack_id`)
    REFERENCES `online_movie_ticket_booking_system`.`snack` (`id`)
    ON DELETE SET NULL
    ON UPDATE SET NULL);

//payment
CREATE TABLE `online_movie_ticket_booking_system`.`payment` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `payment_booking_id` INT NOT NULL,
  `payment_mehod` VARCHAR(45) NOT NULL,
  `payment_user_id` INT NOT NULL,
  `payment_date` DATE NOT NULL,
  `payment_description` TEXT(200) NOT NULL,
  PRIMARY KEY (`id`),
  INDEX `payment_booking_id_idx` (`payment_booking_id` ASC) VISIBLE,
  INDEX `payment_user_id_idx` (`payment_user_id` ASC) VISIBLE,
  CONSTRAINT `payment_booking_id`
    FOREIGN KEY (`payment_booking_id`)
    REFERENCES `online_movie_ticket_booking_system`.`booking` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `payment_user_id`
    FOREIGN KEY (`payment_user_id`)
    REFERENCES `online_movie_ticket_booking_system`.`user` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE);
